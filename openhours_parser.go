// Code generated by goyacc - DO NOT EDIT.


package openhours

import __yyfmt__ "fmt"


import "fmt"

type yySymType struct {
	yys    int
  num int
  nums []int
  tr TimeRange
  trs []TimeRange
  weekly Weekly
  monthly Monthly
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57350
	yyEofCode = 57344
	ALWAYS    = 57348
	MONTH     = 57347
	SEP       = 57349
	WEEKDAY   = 57346
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -47
)

var (

	yyPrec = map[int]int{
		'-': 0,
		':': 0,
		}

	yyXLAT = map[int]int{
		 57344:   0, // $end (45x)
		    59:   1, // ';' (40x)
		 57349:   2, // SEP (30x)
		    48:   3, // '0' (24x)
		    49:   4, // '1' (24x)
		    50:   5, // '2' (24x)
		    51:   6, // '3' (24x)
		    52:   7, // '4' (24x)
		    53:   8, // '5' (24x)
		    54:   9, // '6' (24x)
		    55:  10, // '7' (24x)
		    56:  11, // '8' (24x)
		    57:  12, // '9' (24x)
		    44:  13, // ',' (23x)
		    45:  14, // '-' (18x)
		    58:  15, // ':' (14x)
		 57351:  16, // DIGIT (12x)
		 57352:  17, // NUM (11x)
		 57346:  18, // WEEKDAY (9x)
		 57356:  19, // hour (8x)
		 57365:  20, // time (8x)
		 57366:  21, // timespan (7x)
		 57367:  22, // timespans (7x)
		 57369:  23, // weekdays (6x)
		 57371:  24, // ws (6x)
		 57347:  25, // MONTH (5x)
		 57364:  26, // small_range_selector (5x)
		 57348:  27, // ALWAYS (4x)
		 57353:  28, // day (4x)
		 57354:  29, // days (3x)
		 57355:  30, // ds (3x)
		 57361:  31, // selector (2x)
		 57363:  32, // selectors (2x)
		 57357:  33, // minute (1x)
		 57358:  34, // more_days (1x)
		 57359:  35, // opt_sep (1x)
		 57360:  36, // root (1x)
		 57362:  37, // selector_seq (1x)
		 57368:  38, // timespans_seq (1x)
		 57370:  39, // weekdays_seq (1x)
		 57350:  40, // $default (0x)
		 57345:  41, // error (0x)
	}

	yySymNames = []string{
		"$end",
		"';'",
		"SEP",
		"'0'",
		"'1'",
		"'2'",
		"'3'",
		"'4'",
		"'5'",
		"'6'",
		"'7'",
		"'8'",
		"'9'",
		"','",
		"'-'",
		"':'",
		"DIGIT",
		"NUM",
		"WEEKDAY",
		"hour",
		"time",
		"timespan",
		"timespans",
		"weekdays",
		"ws",
		"MONTH",
		"small_range_selector",
		"ALWAYS",
		"day",
		"days",
		"ds",
		"selector",
		"selectors",
		"minute",
		"more_days",
		"opt_sep",
		"root",
		"selector_seq",
		"timespans_seq",
		"weekdays_seq",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
	}

	yyReductions = map[int]struct{xsym, components int}{
		0: {0, 1},
		1: {36, 0},
		2: {36, 1},
		3: {32, 2},
		4: {37, 0},
		5: {37, 3},
		6: {31, 1},
		7: {31, 1},
		8: {31, 3},
		9: {31, 5},
		10: {31, 3},
		11: {31, 3},
		12: {31, 1},
		13: {29, 2},
		14: {30, 1},
		15: {30, 3},
		16: {34, 0},
		17: {34, 2},
		18: {26, 1},
		19: {26, 3},
		20: {26, 1},
		21: {23, 2},
		22: {24, 1},
		23: {24, 3},
		24: {39, 0},
		25: {39, 2},
		26: {35, 0},
		27: {35, 2},
		28: {22, 2},
		29: {38, 0},
		30: {38, 2},
		31: {21, 3},
		32: {20, 3},
		33: {19, 1},
		34: {33, 1},
		35: {28, 1},
		36: {17, 2},
		37: {16, 1},
		38: {16, 1},
		39: {16, 1},
		40: {16, 1},
		41: {16, 1},
		42: {16, 1},
		43: {16, 1},
		44: {16, 1},
		45: {16, 1},
		46: {16, 1},
	}

	yyXErrors = map[yyXError]string{
	}

	yyParseTab = [64][]uint8{
		// 0
		{46, 3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 64, 60, 63, 62, 61, 58, 57, 59, 53, 54, 51, 56, 52, 55, 50, 49, 36: 48},
		{47},
		{45},
		{43, 107, 37: 106},
		{41, 41},
		// 5
		{40, 40, 101},
		{2: 99},
		{35, 35},
		{31, 31, 31, 13: 97, 34: 96},
		{33, 33, 33, 13: 33, 93},
		// 10
		{29, 29, 91},
		{27, 27},
		{23, 23, 23, 13: 89, 39: 88},
		{25, 25, 25, 13: 25, 86},
		{18, 18, 13: 84, 38: 83},
		// 15
		{14: 80},
		{15: 77},
		{12, 12, 12, 13: 12, 12, 14},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 76},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 20
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 25
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{11, 11, 11, 13: 11, 11, 11},
		// 30
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 79, 33: 78},
		{15, 15, 13: 15, 15},
		{13, 13, 13: 13, 13},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 19: 63, 81},
		{16, 16, 13: 16},
		// 35
		{15: 14},
		{19, 19},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 19: 63, 62, 61, 85},
		{17, 17},
		{18: 87},
		// 40
		{24, 24, 24, 13: 24},
		{26, 26, 26},
		{18: 60, 23: 90, 59},
		{22, 22, 22},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 19: 63, 62, 61, 92},
		// 45
		{28, 28},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 95, 28: 94},
		{32, 32, 32, 13: 32},
		{12, 12, 12, 13: 12, 12},
		{34, 34, 34},
		// 50
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 95, 28: 56, 98, 55},
		{30, 30, 30},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 60, 63, 62, 61, 58, 57, 59, 26: 100},
		{36, 36},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 60, 63, 62, 61, 58, 57, 59, 102, 103},
		// 55
		{39, 39, 104},
		{37, 37},
		{3: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 82, 60, 63, 62, 61, 58, 57, 59, 26: 105},
		{38, 38},
		{44},
		// 60
		{2: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18: 21, 25: 21, 27: 21, 35: 108},
		{2: 110, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 16: 65, 64, 60, 63, 62, 61, 58, 57, 59, 53, 54, 51, 56, 52, 55, 50, 109},
		{42},
		{2: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18: 20, 25: 20, 27: 20},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}
	
func yyParse(yylex yyLexer) int {
	const yyError = 41

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)


	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() { 
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x])+yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2: {
                    res := yylex.(*Lexer).parseResult
                    if res == nil {
                            yylex.(*Lexer).parseResult = yyS[yypt-0].monthly
                    }
                }
	case 3: { yyVAL.monthly = mergeMonthly(yyS[yypt-1].monthly, yyS[yypt-0].monthly) }
	case 4: { yyVAL.monthly = make(Monthly) }
	case 5: { yyVAL.monthly = yyS[yypt-0].monthly }
	case 6: {
                    yyVAL.monthly = setWeekly(makeMonthly(any, []int{ any }), anyTime)
                }
	case 7: {
                    yyVAL.monthly = setWeekly(makeMonthly(any, yyS[yypt-0].nums), anyTime)
                }
	case 8: {
                    yyVAL.monthly = setWeekly(makeMonthly(yyS[yypt-0].num, yyS[yypt-2].nums), anyTime)
                }
	case 9: {
                    yyVAL.monthly = setWeekly(makeMonthly(yyS[yypt-2].num, yyS[yypt-4].nums), yyS[yypt-0].weekly)
                }
	case 10: {
                    yyVAL.monthly = setWeekly(makeMonthly(any, yyS[yypt-2].nums), yyS[yypt-0].weekly)
                }
	case 11: {
                    yyVAL.monthly = setWeekly(makeMonthly(yyS[yypt-2].num, []int{ any }), yyS[yypt-0].weekly)
                }
	case 12: {
                    yyVAL.monthly = setWeekly(makeMonthly(any, []int{ any }), yyS[yypt-0].weekly)
                }
	case 13: {
                    yyVAL.nums = append(yyS[yypt-1].nums, yyS[yypt-0].nums...)
                }
	case 14: { yyVAL.nums = []int{ yyS[yypt-0].num } }
	case 15: {
                    if yyS[yypt-2].num > yyS[yypt-0].num {
                            yylex.Error(fmt.Sprintf("invalid days range: %d - %d\n", yyS[yypt-2].num, yyS[yypt-0].num))
                    }
                    yyVAL.nums = make([]int, 0)
                    for i := yyS[yypt-2].num; i <= yyS[yypt-0].num; i++ {
                        yyVAL.nums = append(yyVAL.nums, i)
                    }
                }
	case 16: { yyVAL.nums = []int{} }
	case 17: { yyVAL.nums = yyS[yypt-0].nums }
	case 18: {yyVAL.weekly = appendWeeklyTimeRanges(make(Weekly), yyS[yypt-0].nums, wholeDay)}
	case 19: {yyVAL.weekly = appendWeeklyTimeRanges(make(Weekly), yyS[yypt-2].nums, yyS[yypt-0].trs)}
	case 20: {yyVAL.weekly = appendWeeklyTimeRanges(make(Weekly), wholeWeek, yyS[yypt-0].trs)}
	case 21: {
                    yyVAL.nums = append(yyS[yypt-1].nums, yyS[yypt-0].nums...)
                }
	case 22: {
                    yyVAL.nums = []int{yyS[yypt-0].num}
                }
	case 23: {
                    if yyS[yypt-2].num > yyS[yypt-0].num {
                            yylex.Error(fmt.Sprintf("invalid weekdays range: %d - %d\n", yyS[yypt-2].num, yyS[yypt-0].num))
                    }
                    yyVAL.nums = make([]int, 0)
                    for i := yyS[yypt-2].num; i <= yyS[yypt-0].num; i++ {
                        yyVAL.nums = append(yyVAL.nums, i)
                    }
                }
	case 24: {
                    yyVAL.nums = []int{}
                }
	case 25: {
                    yyVAL.nums = yyS[yypt-0].nums
                }
	case 28: { yyVAL.trs = append(yyS[yypt-0].trs, yyS[yypt-1].tr) }
	case 29: { yyVAL.trs = []TimeRange{} }
	case 30: { yyVAL.trs = yyS[yypt-0].trs }
	case 31: {
                    ts := NewTimeRange(yyS[yypt-2].num, yyS[yypt-0].num)

                    if ts.Start >= ts.End {
                            yylex.Error(fmt.Sprintf("invalid timerange: %v\n", ts))
                    }
                    yyVAL.tr = ts
                }
	case 32: {
                    t := yyS[yypt-2].num + yyS[yypt-0].num
                    if t > 1440 { // > 24:00
                            yylex.Error(fmt.Sprintf("invalid time: %d\n", t))
                    }
                    yyVAL.num = t
                }
	case 33: {
                        if yyS[yypt-0].num < 0 || yyS[yypt-0].num > 24 {
                                yylex.Error(fmt.Sprintf("invalid hour: %d\n", yyS[yypt-0].num))
                        }
                        yyVAL.num = yyS[yypt-0].num * 60
                    }
	case 34: {
                        if yyS[yypt-0].num < 0 || yyS[yypt-0].num > 59 {
                                yylex.Error(fmt.Sprintf("invalid minutes: %d\n", yyS[yypt-0].num))
                        }
                        yyVAL.num = yyS[yypt-0].num
                    }
	case 35: {
                    if yyS[yypt-0].num < 1 || yyS[yypt-0].num > 31 { yylex.Error(fmt.Sprintf("invalid day: %d\n", yyS[yypt-0].num)) }
                    yyVAL.num = yyS[yypt-0].num
                }
	case 36: {yyVAL.num = yyS[yypt-1].num * 10 + yyS[yypt-0].num}
	case 37: {yyVAL.num=0}
	case 38: {yyVAL.num=1}
	case 39: {yyVAL.num=2}
	case 40: {yyVAL.num=3}
	case 41: {yyVAL.num=4}
	case 42: {yyVAL.num=5}
	case 43: {yyVAL.num=6}
	case 44: {yyVAL.num=7}
	case 45: {yyVAL.num=8}
	case 46: {yyVAL.num=9}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
